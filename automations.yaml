- alias: 'Telegram bot that reply pong to ping'
  initial_state: True
  trigger:
    platform: event
    event_type: telegram_command
    event_data:
      command: '/ping'
  action:
    - service: notify.catinghampalacebot
      data:
        message: 'pong'

- alias: 'Update Available Notifications'
  initial_state: True
  trigger:
    platform: state
    entity_id: updater.updater
  action:
    - service: notify.telegram2rubens
      data:
        message: 'A new update for Home Assistant is available.'

- id: 'roller_shutter_sunrise'
  alias: 'Roller shutter sunrise'
  initial_state: True
  trigger:
    - platform: sun
      event: sunrise
      offset: "-00:30:00"
    - platform: time
      at: "08:00:00"
  condition:  
    condition: and
    conditions:
      - condition: sun
        after: sunrise
        after_offset: "-00:30:00"
      - condition: time
        after: "08:00:00"    
  action: 
    - service: cover.open_cover
      entity_id: all
    # - condition: or
    #   conditions:
    #     - condition: time
    #       weekday:
    #         - mon
    #         - tue
    #         - wed
    #         - thu
    #         - fri
    #     - condition: state
    #       entity_id: input_boolean.avoid_bedroom_roller_shutter_up_during_weekend
    #       state: 'off'
    # - service: script.roller_shutter_set_position
    #   data:
    #     entity_id: input_number.bedroom_rolling_shutter
    #     position: 100

- id: 'roller_shutter_sunset'
  alias: 'Roller shutter sunset'
  initial_state: True
  trigger:
    platform: sun
    event: sunset
#    offset: "00:30:00"
  action: 
    service: python_script.cover_sunset
    entity_id: all

- id: 'roller_shutter_away_mode'
  alias: 'Roller shutter away mode'
  initial_state: True
  trigger:
    platform: state
    entity_id: group.family
    from: "home"
    to: "not_home"
  action:
    - service: python_script.cover_mode
      data_template:
        mode: "fuori casa"
    - service: notify.telegram2rubens
      data: 
        message: "Tutti i componenti della famiglia sono fuori casa"

- id: "valentina_left_work"
  alias: "Valentina left work"
  initial_state: True
  trigger:
    - platform: zone
      entity_id: person.valentina
      zone: zone.work_2
      event: leave
  action:
    - service: notify.telegram2rubens
      data: 
        message: "Valentina sta tornando a casa"  
  
- id: "notify_homeassistant_startup"
  alias: "Notify HomeAssistant startup"
  initial_state: True
  trigger:
    - platform: homeassistant
      event: start
  action:
    - service: notify.telegram2rubens
      data: 
        message: "HomeAssistant started 🏡"  

- id: "notify_homeassistant_startup"
  alias: "Notify HomeAssistant shutdown"
  initial_state: True
  trigger:
    - platform: homeassistant
      event: shutdown
  action:
    - service: notify.telegram2rubens
      data: 
        message: "HomeAssistant is shutting down 👋"  

- id: 'greenhouse_auto_humidity_power_off'
  alias: 'Greenhouse auto humidity power off'
  initial_state: True
  trigger:
    - platform: template
      value_template: '{% if (states("sensor.greenhouse_humidity")| int > (states("input_number.greenhouse_humidifier_target_humidity")|int) + 3) %}true{% endif %}'
  condition:    
    condition: state
    entity_id: switch.greenhouse_humidifier_mode
    state: 'on'      
  action:
    - service: switch.turn_off
      entity_id: switch.greenhouse_humidifier_power
 
- id: 'greenhouse_auto_humidity_power_on'
  alias: 'Greenhouse auto humidity power on'
  initial_state: True
  trigger:
    - platform: template
      value_template: '{% if (states("sensor.greenhouse_humidity")| int < (states("input_number.greenhouse_humidifier_target_humidity")|int) - 3) %}true{% endif %}'
  condition:    
    condition: state
    entity_id: switch.greenhouse_humidifier_mode
    state: 'on'      
  action:
    - service: switch.turn_on
      entity_id: switch.greenhouse_humidifier_power
      
- id: 'living_room_roller_shutter_up_delayed'
  alias: 'Living room roller shutter up delayed'
  initial_state: True
  trigger:
    - platform: event
      event_type: timer.finished
      event_data:
        entity_id: timer.tv_shut_down_delay
  action:
    - service: cover.open_cover
      entity_id: cover.living_room_left
      
- id: 'living_room_roller_shutter_tv_on_aware'
  alias: 'Living room roller shutter TV ON aware'
  initial_state: True
  trigger:
    - platform: state
      entity_id: media_player.living_room_tv
      from: 'off'
      to: 'on'
  condition: 
    condition: state
    entity_id: sun.sun
    state: 'above_horizon'
  action:
    - service: timer.cancel
      entity_id: timer.tv_shut_down_delay
    - service: cover.close_cover
      entity_id: cover.living_room_left

- id: 'living_room_roller_shutter_tv_off_aware'
  alias: 'Living room roller shutter TV OFF aware'
  initial_state: True
  trigger:
    - platform: state
      entity_id: media_player.living_room_tv
      to: 'off'
      from: 'on'
  condition: 
    condition: state
    entity_id: sun.sun
    state: 'above_horizon'
  action:
    - service: timer.start
      entity_id: timer.tv_shut_down_delay

- alias: RFID Stair lock
  initial_state: 'on'
  trigger:
  - platform: mqtt
    topic: catingham_palace/stair/rfid_reader
  condition:
      condition: template
      value_template: '{{ trigger.payload_json.username in ("Rubens", "Valentina", "Lino", "Carla", "Ivan") }}'
  action:
  - service: lock.unlock
    data:
      entity_id: lock.stair_front_door      
      
- alias: IFTTT Webhook
  trigger:
    platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: call_service
  condition:
    - condition: template
      value_template: "{{ trigger.event.data.mode is not defined }}"
  action:
    service_template: "{{ trigger.event.data.service }}"
    data_template:
      entity_id: "{{ trigger.event.data.entity_id }}"


- alias: IFTTT Webhook (with mode)
  trigger:
    platform: event
    event_type: ifttt_webhook_received
    event_data:
      action: call_service
  condition:
    - condition: template
      value_template: "{{ trigger.event.data.mode is defined }}"
  action:
    service_template: "{{ trigger.event.data.service }}"
    data_template:
      entity_id: "{{ trigger.event.data.entity_id }}"
      mode: "{{ trigger.event.data.mode }}"

- alias: "Sync kitchen auxiliary lights"
  trigger:
  - platform: state
    entity_id: light.kitchen_hood, light.kitchen_countertop
    from: 'on'
    to: 'off'
  - platform: state
    entity_id: light.kitchen_hood, light.kitchen_countertop
    from: 'off'
    to: 'on'
  action:
    service_template: 'light.turn_{{ trigger.to_state.state }}'
    data_template:
      entity_id: 'light.kitchen_{% if trigger.from_state.entity_id == "light.kitchen_hood" %}countertop{% else %}hood{% endif %}'